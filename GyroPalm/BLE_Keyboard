// Begin AutoGenerated Includes - DO NOT EDIT BELOW
#include <GyroPalmEngine.h>
#include <GyroPalmLVGL.h>
// End AutoGenerated Includes - DO NOT EDIT ABOVE
#include <BleKeyboard.h>
// Begin AutoGenerated Globals - DO NOT EDIT BELOW
GyroPalm *device;
GyroPalmEngine gplm("gp20906498");    //declares a GyroPalm Engine object with wearableID

AXP20X_Class *power;
lv_task_t *barTask;
void lv_update_task(struct _lv_task_t *);

enum Screen { SCR_HOME };	//Screen indexes
lv_obj_t *screen[1];    //screen pointers
GyroPalmLVGL form[1];   //screen helper methods
Screen curScreen = SCR_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE
// Define the UUIDs
#define SERVICE_UUID_GP "9d6592a5-389s-2588-gplm-abe2443d5310"
#define CHAR_UUID_MODEL "9d6592a5-389c-2588-gplm-abe2443d5320"
#define CHAR_UUID_WEARABLEID "9d6592a5-389c-2588-gplm-abe2443d5321"
#define CHAR_UUID_BATT "9d6592a5-389c-2588-gplm-abe2443d5322"
#define CHAR_UUID_TIME "9d6592a5-389c-2588-gplm-abe2443d5323"
#define CHAR_UUID_ALERTS "9d6592a5-389c-2588-gplm-abe2443d5326"
// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW
void lv_update_task(struct _lv_task_t *data) {
    int battPercent = power->getBattPercentage();
    bool isCharging = power->isChargeing();
    form[curScreen].updateBar(battPercent, isCharging);
    form[curScreen].setTime(gplm.getTime());     //update Time View
    
    // Auto-sleep on inactivity after 30 seconds
    const int sleepAfter = 800;
    if (lv_disp_get_inactive_time(NULL) > sleepAfter*1000) {
        onPwrQuickPress();
        lv_disp_trig_activity(NULL);    //reset inactivity counter
    }
}

void onPwrQuickPress() {
    gplm.toggleSleep();
    if (gplm.isSleep) {
        // Turn off unused interrupts while sleep
        gplm.sensor->enableStepCountInterrupt(false);
        gplm.sensor->enableWakeupInterrupt(false);
        gplm.sensor->enableActivityInterrupt(false);
    } else {
        // Restore interrupts
        delay(5);
        gplm.sensor->enableStepCountInterrupt(true);
        gplm.sensor->enableWakeupInterrupt(true);
        gplm.sensor->enableActivityInterrupt(true);
    }
}

void handlePowerWake() {
    power->readIRQ();
    if (gplm.isSleep && power->isPEKShortPressIRQ()) {
        Serial.println("GyroPalm wake");
        onPwrQuickPress();
    }
}

static void btn_event_handler(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
		Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen)
        {
            case SCR_HOME:
			
            break;

            default: break;
		}
	}
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp(int page) {
    if ((Screen) page != curScreen) {
        form[curScreen].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
		case SCR_HOME:
        {
            //Draw screen UI
            curScreen = (Screen) page;
            form[curScreen].init(screen[curScreen]);  //now defining screen items
            form[curScreen].createBar(barTask, lv_update_task);
            form[curScreen].setTime(gplm.getTime());
			form[curScreen].createLabel(0, -37, "Flick to Navigate");    //show element
            form[curScreen].createLabel(0, 0, "Highlighted ButtonsS are Orange");    //show element
            form[curScreen].createLabel(0, 37, "Snap to Select");    //show element
			

            form[curScreen].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;


        default: break;
    }
    gplm.setScreen(&form[curScreen]);
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

BleKeyboard bleKeyboard("GyroPalm Perform BLE");


void onDeviceFlick(int direction)
{
    switch(direction)
    {        
        case FLICK_LEFT:
            bleKeyboard.write(KEY_RIGHT_ARROW);
            //delay(1500);
        break;
        
        case FLICK_RIGHT:
            bleKeyboard.write(KEY_LEFT_ARROW);
            //delay(1500);
        break;
        
        case FLICK_UP:
            bleKeyboard.write(KEY_DOWN_ARROW);
            //delay(1500);
        break;
        
        case FLICK_DOWN:
            bleKeyboard.write(KEY_UP_ARROW);
            //delay(1500);
        break;
        
        
    }
}

void onRawSnap()
{
    bleKeyboard.write(KEY_RETURN); //spacebar
}

void setup() {
	Serial.begin(115200);
	
    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
	gplm.begin();
	delay(100);
	gplm.listenEvents(false);    //starts listening for events

	gplm.setPwrQuickPressCallback(onPwrQuickPress);
    delay(100);

	device = gplm.wearable; //gives control to the developer to run device methods
	device->lvgl_begin();   //Initiate LVGL core
	device->bl->adjust(120);    //Lower the brightness
	power = gplm.power;		//gives control to the developer to access power methods
	power->setChargeControlCur(500);    //enable fast charging

	NimBLEDevice::init("Not Cam's GyroPalm");
	// End AutoGenerated Setup - DO NOT EDIT ABOVE

    NimBLEServer *pServer = NimBLEDevice::createServer();

    // Create the service
    NimBLEService *pService = pServer->createService(SERVICE_UUID_GP);

    // Create characteristics with READ permissions
    pService->createCharacteristic(CHAR_UUID_MODEL, NIMBLE_PROPERTY::READ);
    pService->createCharacteristic(CHAR_UUID_WEARABLEID, NIMBLE_PROPERTY::READ);
    pService->createCharacteristic(CHAR_UUID_BATT, NIMBLE_PROPERTY::READ);
    pService->createCharacteristic(CHAR_UUID_TIME, NIMBLE_PROPERTY::READ);

    // Create the ALERTS characteristic with WRITE permissions

    pService->start();

    // Start advertising
    NimBLEAdvertising *pAdvertising = NimBLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(SERVICE_UUID_GP);
    pAdvertising->start();

    showApp(curScreen);
    
    bleKeyboard.begin();

    gplm.setRawSnapCallback(onRawSnap);

    gplm.setFlickCallback(onDeviceFlick);
}

void loop() {
	Serial.println(gplm.myLicense.secret);
	delay(1000);
	
    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
	handlePowerWake();
	lv_task_handler();
	delay(50);
	// End AutoGenerated Loop - DO NOT EDIT ABOVE
}
